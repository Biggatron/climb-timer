<link rel="stylesheet" href="/css/timer.css" type="text/css">
<div class="timer-input-container">
    <div class="timer-input">
        <p class="center-self">Timer</p>
        <div class="timer-input-buttons-container">
            <button class="timer-input-button" onclick="increaseTimerMinutes()">+</button>
            <button class="timer-input-button" onclick="increaseTimerSeconds()">+</button>
        </div>
        <div class="timer-input-time-container">
            <div id="timerMin" class="timer-input-text number">00</div>
            <div class="timer-input-text">:</div>
            <div id="timerSec" class="timer-input-text number">00</div>
        </div>
        <div class="timer-input-buttons-container">
            <button class="timer-input-button" onclick="decreaseTimerMinutes()">-</button>
            <button class="timer-input-button" onclick="decreaseTimerSeconds()">-</button>
        </div>
    </div>
    <div class="timer-input">
        <p class="center-self">Buffer</p>
        <div class="timer-input-buttons-container">
            <button class="timer-input-button" onclick="increaseBufferMinutes()">+</button>
            <button class="timer-input-button" onclick="increaseBufferSeconds()">+</button>
        </div>
        <div class="timer-input-time-container">
            <div id="bufferMin" class="timer-input-text number">00</div>
            <div class="timer-input-text">:</div>
            <div id="bufferSec" class="timer-input-text number">00</div>
        </div>
        <div class="timer-input-buttons-container">
            <button class="timer-input-button" onclick="decreaseBufferMinutes()">-</button>
            <button class="timer-input-button" onclick="decreaseBufferSeconds()">-</button>
        </div>
    </div>
    
</div>

<script>
    var secondStep = 15;

    var timer = {
        minutes: 0,
        seconds: 0
    }
    var buffer = {
        minutes: 0,
        seconds: 0
    }
    var timerString = {
        minutes: '00',
        seconds: '00'
    }
    var bufferString = {
        minutes: '00',
        seconds: '00'
    }

    // Generate mapping from keycodes to numbers
    var keyCodes = [];
    for (let i=0; i<10; i++) {
        // Numbers 0-9 have keycodes 48-57
        let keyCodeValuePair = {
            keyCode: i + 48,
            value: "" + i
        }
        keyCodes.push(keyCodeValuePair)
        // Numpad number 96-95
        keyCodeValuePair = {
            keyCode: i + 96,
            value: "" + i
        }
        keyCodes.push(keyCodeValuePair)
    }

    var timerMinEl = document.getElementById('timerMin');
    var timerSecEl = document.getElementById('timerSec');
    var bufferMinEl = document.getElementById('bufferMin');
    var bufferSecEl = document.getElementById('bufferSec');

    // Add event listener to edit time manually
    var enteredTime;
    var currentTime;
    var elBeingEditied;
    let inputFields = document.querySelectorAll('#timerMin, #timerSec, #bufferMin, #bufferSec');
    for (let i=0; i<inputFields.length; i++) {
        // Set clicked input field as editable
        inputFields[i].addEventListener('click', (el) => {
            console.log('element clicked')
            elBeingEditied= el.target;
            elBeingEditied.contentEditable = true;
            //selectElementContents(elBeingEditied);
            enteredTime = "00";
            currentTime = elBeingEditied.innerText;
        });
        // Handle keypresses in inputfield
        inputFields[i].addEventListener("keydown", (event) => {
            let keyCodePair = keyCodes.find(pair => pair.keyCode === event.keyCode);
            let currentText = elBeingEditied.innerText; 
            if (keyCodePair) {
                // Ignor input if current length is 2 and text is not higlighted
                if (elBeingEditied.innerText.length === 2) {
                    let selection = window.getSelection().toString();
                    // Check if selection could be a part of current el value.
                    // I don't see how a user could select another text while keeping the cursor on text being edited
                    if (!elBeingEditied.innerText.includes(selection) || !selection) {
                        event.preventDefault();
                    }
                } else if ( (currentText + keyCodePair.value) > 60) {
                    // Ignore input if it makes total higher than 60
                    event.preventDefault();
                } 
            } else if ( event.keyCode === 46 || 
                        event.keyCode ===  8 || 
                        event.keyCode === 37 || 
                        event.keyCode === 39 ) { 
                // Backspace, delete, right and left arrow keys
                // No need to intervene
            } else {
                // Key pressed is not a number, backspace, delete or left or right arrow key
                // We ignore keypress.
                event.preventDefault();
            }
        })

    }

    // Timer events
    function increaseTimerMinutes() {
        increaseMinutes(timer, timerString, timerMinEl)
    }  
    function decreaseTimerMinutes() {
        decreaseMinutes(timer, timerString, timerMinEl)
    }  
    function increaseTimerSeconds() {
        increaseSeconds(timer, timerString, timerMinEl, timerSecEl)
    }  
    function decreaseTimerSeconds() {
        decreaseSeconds(timer, timerString, timerMinEl, timerSecEl)
    }  

    // Buffer events
    function increaseBufferMinutes() {
        increaseMinutes(buffer, bufferString, bufferMinEl)
    }  
    function decreaseBufferMinutes() {
        decreaseMinutes(buffer, bufferString, bufferMinEl)
    }  
    function increaseBufferSeconds() {
        increaseSeconds(buffer, bufferString, bufferMinEl, bufferSecEl)
    }  
    function decreaseBufferSeconds() {
        decreaseSeconds(buffer, bufferString, bufferMinEl, bufferSecEl)
    }

    function increaseMinutes(timeObj,stringObj, el) {
        if (timeObj.minutes < 99) ++timeObj.minutes;
        updateMinutes(timeObj, stringObj, el);
    }

    function decreaseMinutes(timeObj,stringObj, el) {
        if (timeObj.minutes > 0) --timeObj.minutes;
        updateMinutes(timeObj, stringObj, el);
    }

    function increaseSeconds(timeObj,stringObj, elMin, elSec) {
        timeObj.seconds -= timeObj.seconds % secondStep;
        if ((timeObj.seconds + secondStep) === 60) {
            if (timeObj.minutes < 99 ) {
                ++timeObj.minutes;
                timeObj.seconds = 0;
            }
        } else {
            timeObj.seconds += secondStep;
        }
        updateMinutes(timeObj, stringObj, elMin);
        updateSeconds(timeObj, stringObj, elSec);
    }

    function decreaseSeconds(timeObj, stringObj, elMin, elSec) {
        let modSeconds = timeObj.seconds % secondStep
        if (modSeconds !== 0) {
            timeObj.seconds -= timeObj.seconds % secondStep;
            timeObj.seconds += secondStep;
        }
        if ((timeObj.seconds - secondStep) < 0) {
            if (timeObj.minutes > 0 ) {
                --timeObj.minutes;
                timeObj.seconds = 60 - secondStep;
            }
        } else {
            timeObj.seconds -= secondStep;
        }
        updateMinutes(timeObj, stringObj, elMin);
        updateSeconds(timeObj, stringObj, elSec);
    }

    function updateMinutes(timeObj, stringObj, el) {
        if (timeObj.minutes.toString().length === 1) {
            stringObj.minutes = '0' + timeObj.minutes;
        } else {
            stringObj.minutes = timeObj.minutes.toString();
        }
        el.innerText = stringObj.minutes;
    }

    function updateSeconds(timeObj, stringObj, el) {
        if (timeObj.seconds.toString().length === 1) {
            stringObj.seconds = '0' + timeObj.seconds;
        } else {
            stringObj.seconds = timeObj.seconds.toString();
        }
        el.innerText = stringObj.seconds;
    }

    function zeroPad(num) {
        var zero = 2 - num.toString().length + 1;
        return Array(+(zero > 0 && zero)).join("0") + num;
    }

    function selectElementContents(el) {
        let range = document.createRange();
        range.selectNodeContents(el);
        let sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }

    // updates timer/buffer json object once user has manually inputed text
    function updateTimerObject(el) {
        if (!el) { return 0; };
        switch (el.id) {
            case "timerMin":
                timer.minutes = parseInt(el.innerText);
                timerString.minutes = el.innerText;
                break;
            case "timerSec":
                timer.seconds = parseInt(el.innerText);
                timerString.seconds = el.innerText;
                break;
            case "bufferMin":
                buffer.minutes = parseInt(el.innerText);
                bufferString.minutes = el.innerText;
                break;
            case "bufferSec":
                buffer.seconds = parseInt(el.innerText);
                bufferString.seconds = el.innerText;
                break;
        }
    }

    // Event to handle when user clicks away from editable timer text
    addEventListener("mousedown", (event) => {
        if (!elBeingEditied){ return 0; }; // If no element is being edited then nothing needs to be done
        if (event.target === elBeingEditied) { return 0; }; // If element being edited was clicked then nothing needs to be done
        if (elBeingEditied.innerText.length === 0) {
            elBeingEditied.innerText = "00"; 
        } else if (elBeingEditied.innerText.length === 1) {
            elBeingEditied.innerText = "0" + elBeingEditied.innerText;
        }
        updateTimerObject(elBeingEditied);
        elBeingEditied.contentEditable = false;
        elBeingEditied = null;
    });
</script>