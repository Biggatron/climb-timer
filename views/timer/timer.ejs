<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head'); %>
  <link rel="stylesheet" href="/css/timer.css" type="text/css">
</head>

<body class="body-container">

  <header>
    <%- include('../partials/header', {navItem: 'timer' }); %>
  </header>

  <main>
    <div class="content-container">
      <div class="center-col-container">
        <div class="timers-container">
          <div class="space-between-row timer-controls-container">
            <div class="dropdown settings-dropdown">
              <button title="Settings" id="settingsButton" class="btn btn-icon timer-button-settings" onClick="openSettings()"></button>  
              <div id="settingsDropdown" class="settings-dropdown-content">
                <button title="Toggle Milliseconds" id="toggleMillisecondsButton" class="dropdown-button" onClick="toggleMilliseconds()">  
                  <span class="btn-icon timer-button-milliseconds dropdown-icon"></span>
                  <p id="toggleMillisecondsText">Show milliseconds</p>
                </button>
                <button title="Show Round on fullscreen" id="toggleRoundsOnFullscreen" class="dropdown-button" onClick="toggleFullscreenRound()">  
                  <span class="btn-icon timer-button-fullscreen-round dropdown-icon"></span>
                  <p id="toggleFullscreenRoundText">Show Round on fullscreen</p>
                </button>
                <button title="Sync connected timers" id="syncTimersButton" class="dropdown-button" onClick="syncToConnectedTimers()">  
                  <span class="btn-icon timer-button-sync dropdown-icon"></span>
                  <p>Sync connected timers</p>
                </button>
                <button title="Initialize timer" id="resetTimerButton" class="dropdown-button" onClick="resetTimer()">  
                  <span class="btn-icon timer-button-reset dropdown-icon"></span>
                  <p>Reset timer</p>
                </button>
                <button title="Delete timer" id="deleteTimerButton" class="dropdown-button" onClick="deleteTimer()">  
                  <span class="btn-icon timer-button-delete dropdown-icon"></span>
                  <p>Delete timer</p>
                </button>
              </div>
            </div>
            <div style="text-align: center;">
              <h5 class="timer-name"><%= timer.timer_name %></h5>
              <h1 class="timer-round" id="timerRound">Round 1</h1>
            </div>
            <div style="width: 3em;"></div>
          </div>
          <div class="timer-container" id="timer-container">
            <h1 class="display-none" id="fullscreenTimerRound">Round 1</h1>
            <div class="timer-text-container">
              <div class="vertical-shrink-center-container" id="timer-text-container">
                <div class="timer-text" id="timerMin"></div>
                <div class="timer-text">:</div>
                <div class="timer-text" id="timerSec"></div>
                <div class="timer-text timer-text-ms display-none" id="timerMil"></div>
              </div>
            </div>
          </div>
          <div class="space-between-row timer-controls-container">
            <button title="Sound On/off" id="toggleSoundButton" class="btn btn-icon timer-button-unmute" onClick="toggleSound()"></button>
            <div class="center-row-container" id="timerOwnerButtons"> 
              <button title="Play/Pause" id="toggleTimerButton" class="btn btn-icon timer-button-play" onClick="toggleTimer()"></button>
            </div>
            <button title="Toggle Fullscreen" id="toggleTimerFullscreen" class="btn btn-icon timer-button-fullscreen" onClick="toggleFullscreen()"></button>
          </div>
        </div>
      </div>
    </div>
  </main>

  <footer>
    <%- include('../partials/footer'); %>
  </footer>
  <script src="/scripts/socket.io.js"></script>
  <script src="/scripts/noSleep.js"></script>
  <audio preload="auto" id="shortBeep" src="/media/shortBeep.wav"></audio>
  <audio preload="auto" id="longBeep" src="/media/longBeep.wav"></audio>
</body>
</html>

<script>
  let timer, user, ownedTimers; // ownedTimers list timers owned be logged out user
  user = '<%- JSON.stringify(user) %>';
  if (user) {
    user = JSON.parse(user);
  }

  timer = `<%- JSON.stringify(timer) %>`;
  timer = JSON.parse(timer);

  ownedTimers = '<%- JSON.stringify(ownedTimers) %>';
  if (ownedTimers) {
    ownedTimers = JSON.parse(ownedTimers);
  }

  let socket = io({
    query: {
      timerCode: timer.timer_code,
      userId : user.id,
      timerUserId : timer.user_id
    }
  });

  let noSleep = new NoSleep();
  let isNoSleepActive = false;

  var soundOn = false;
  var showFullscreenRound = false;
  var millisecondsOn = false;
  var shortBeep = document.getElementById("shortBeep");
  var longBeep = document.getElementById("longBeep");
  var timerTextContainerEl = document.getElementById("timer-text-container");
  var timerContainerEl = document.getElementById("timer-container");
  timerContainerEl.addEventListener("fullscreenchange", fullscreenChanged);
  timerContainerEl.addEventListener("fullscreenchange", enableNoSleep);

  // Add 1000 to make up for starting timer at 4:00 and holding it for 1 sec
  if (timer.timer_buffer) {
    timer.timer_buffer += 1;
  }
  var roundTime = timer.timer_duration * 1000 + timer.timer_buffer * 1000; 
  var roundTimeSec = Math.floor(roundTime / 1000);
  var timerInterval;
  var intervalDelay;  
  var startTimeStamp;
  var pauseTimeStamp;

  let timerMinEl = document.getElementById('timerMin');
  let timerSecEl = document.getElementById('timerSec');
  let timerMilEl = document.getElementById('timerMil');
  let timerRoundEl = document.getElementById('timerRound');

  let toggleTimerButton = document.getElementById('toggleTimerButton');
  let toggleSoundButton = document.getElementById('toggleSoundButton');
  let fullscreenTimerRoundEl = document.getElementById("fullscreenTimerRound");
  let loaderEl = document.getElementById("loader");
  
  // To keep track on sec update
  let prevTimer = {
    timerMin: 0,
    timerSec: 0,
    bufferSec: 0
  }

  setTimerOwnerButtons();

  initializeTimer();
  updateTimerEl();
  if (!timer.is_paused) { 
    startTimer();
  };

  function setTimerOwnerButtons() {
    // If userID does not match timer userID and timer does not belong to clients temp timers
    // then control buttons are removed
    if (user.id !== timer.user_id && !ownedTimers.includes(timer.timer_code)) {
      let toggleTimerButtonEl = document.getElementById("toggleTimerButton");
      toggleTimerButtonEl.remove();
      let syncTimerButtonEl = document.getElementById("syncTimersButton");
      syncTimerButtonEl.remove();
      let resetTimerButtonEl = document.getElementById("resetTimerButton");
      resetTimerButtonEl.remove();
    }
    if (user.id !== timer.user_id) {
      let deleteTimerButtonEl = document.getElementById("deleteTimerButton");
      deleteTimerButtonEl.remove();
    }
  }

  function playSound() {
    // If sound is off then leave function
    if (!soundOn) {
      return;
    }

    if (!timer.bufferActive && timer.timerMin === 0 && timer.timerSec === 0) {
    //if ( (prevTimer.timerSec === 0 && prevTimer.timerMin === 0 && timer.timerSec !== 0 ) || (prevTimer.bufferSec !== timer.bufferSec && timer.bufferSec ===(timer.bufferSecOrig - 1)) ) {
      longBeep.play();
    } else if (timer.bufferActive) {
      if (timer.bufferMin === 0 && timer.bufferSec === 0 ) {
        longBeep.play(); // timer starts at initial-1 so sound is played when buffer reaches zero
      } else if (timer.bufferMin !== 0) {
        return;
      } else if (timer.bufferSec <= 5 ) {
        shortBeep.play();
      }
      return;
    } else if (timer.timerMin === timer.timerMinOrig && timer.timerSec === timer.timerSecOrig) {
      longBeep.play(); // When initial and start timer is pressed
    } else if (timer.timerMin === 1 && timer.timerSec === 0) {
      shortBeep.play();
    } else if (timer.timerMin !== 0) {
      return;
    } else if (timer.timerSec <= 5 ) {
      shortBeep.play();
    }
  };

  socket.on("startTimer", (socketTimer) => {
    timer = socketTimer;
    console.log('start timer með socket')
    startTimer(150);
  });

  socket.on("pauseTimer", (socketTimer) => {
    timer = socketTimer;
    console.log("Pause timer með socket")
    pauseTimer();
  });

  socket.on("syncTimer", (socketTimer) => {
    console.log('Timer synced from master')
    timer = socketTimer;
    updateTimerEl();
    if (timer.is_paused) {
      pauseTimer();
    } else {
      clearInterval(timerInterval);
      timerInterval = null;
      startTimer(150);
    }
  });

socket.on("syncRequest", (socketTimer) => {
  // Only master timer will answer sync request
  if ( user.id !== timer.user_id ) { return };
  console.log('SyncRequest answered');
  syncToConnectedTimers();
});

function syncToConnectedTimers() {
    if (timer.is_paused) {
      socket.emit('syncTimer', timer);
    } else {
      let tempTimer = structuredClone(timer);
      let currTimeStamp = new Date();
      let timeDiff = currTimeStamp - startTimeStamp;
      tempTimer.time_elapsed = timer.time_elapsed + timeDiff;
      socket.emit('syncTimer', tempTimer);
    }
}

  socket.on("resetTimer", (socketTimer) => {
    timer = socketTimer;
    console.log("Reset timer með socket")
    timer.time_elapsed = 0;
    pauseTimer();
    initializeTimer();
    updateTimerEl();
  });

function initializeTimer() {
  timer.timerMinOrig = Math.floor(timer.timer_duration / 60);
  timer.timerSecOrig = timer.timer_duration % 60;
  timer.bufferMinOrig = Math.floor(timer.timer_buffer / 60);
  timer.bufferSecOrig = timer.timer_buffer % 60;
  timer.round = 1;

  if (timer.time_elapsed) {
    let timerRemaining, bufferRemaining;
    let timerElapsedMod = timer.time_elapsed % roundTime;

    // Get the round number from elapsed time
    if (timer.time_elapsed > roundTime) {
      timer.round += Math.floor(timer.time_elapsed / roundTime);
    }
    // Set timer and buffer from elapsed time
    if ( timerElapsedMod < timer.timer_duration * 1000) {
      timerRemaining = timer.timer_duration * 1000 - timerElapsedMod;
      bufferRemaining = timer.timer_buffer * 1000;
      timer.bufferActive = false;
    } else if ( timerElapsedMod < roundTime ) {
      timerRemaining = 0;
      bufferRemaining = timer.timer_buffer * 1000 - (timerElapsedMod - timer.timer_duration * 1000);
      timer.bufferActive = true;
    };

    timerRemaining = Math.floor( timerRemaining / 1000);
    bufferRemaining = Math.floor( bufferRemaining / 1000);
    timer.timerMin = Math.floor(timerRemaining / 60);
    timer.timerSec = timerRemaining % 60;
    timer.bufferMin = Math.floor(bufferRemaining / 60);
    timer.bufferSec = bufferRemaining % 60;
    timer.timerMil = 1000 - (timer.time_elapsed % 1000);
  } else {
    timer.timerMin = timer.timerMinOrig;
    timer.timerSec = timer.timerSecOrig;
    timer.bufferMin = timer.bufferMinOrig;
    timer.bufferSec = timer.bufferSecOrig;
    timer.timerMil = 0; 
    timer.bufferActive = false;
  }

  if (millisecondsOn) {
    timerMilEl.classList.remove('display-none');
  }
}

  function updateTimerEl() {
    // Displaying 1000 ms will cause elements to jitter. 
    if (timer.timerMil === 1000) {
      timer.timerMil = 999;
    }

    if (timer.timerMin < 100) {
      if (timer.bufferActive) {
        timerMinEl.innerText = zeroPad(timer.bufferMin.toString(), 2);
        timerSecEl.innerText = zeroPad(timer.bufferSec.toString(), 2);
      } else {
        timerMinEl.innerText = zeroPad(timer.timerMin.toString(), 2);
        timerSecEl.innerText = zeroPad(timer.timerSec.toString(), 2);
      }
      timerMilEl.innerText = zeroPad(timer.timerMil.toString(), 3);
      timerRoundEl.innerText = "Round " + timer.round;
      fullscreenTimerRoundEl.innerText = "Round " + timer.round;
    }
    updateTimerBackgroundColor();
  }

  function updateTimerBackgroundColor() {
    if (timer.bufferActive) {
        timerContainerEl.style.backgroundColor = timer.buffer_color || "#FFFB80";
    } else {
      if (timer.rotating_background_color) {
        if ( timer.round % 2 === 0 ) {
          timerContainerEl.style.backgroundColor = timer.secondary_color ||"#93B5FF";
        } else {
          timerContainerEl.style.backgroundColor = timer.main_color || "#93FF9F";
        }
      } else {
        timerContainerEl.style.backgroundColor = timer.main_color || "#93FF9F";
      }
    }
    let timerTextEls = document.getElementsByClassName("timer-text");
    let textColor = pickTextColorBasedOnBgColor(timerContainerEl.style.backgroundColor, "#000000", "#ffffff");
    for (let i = 0; i < timerTextEls.length; i++) {
      timerTextEls[i].style.color = textColor;
    }
    if (showFullscreenRound) {
      fullscreenTimerRoundEl.style.color = textColor;
    }
  }

  function zeroPad(num, len) {
    if (len - num.length === 1) {
      return "0" + num;
    } else if (len - num.length === 2) {
      return "00" + num;
    } else {
      return num;
    }
  }

  function toggleTimer() {
    // timerInterval indicates whether timer is active or not
    if (timerInterval) {
      pauseTimerClick();
    } else {
      startTimerClick();
    }
  }

  function startTimerClick() {
    socket.emit('startTimer', timer);
    playSound();
    startTimer();
  }

  function pauseTimerClick() {
    // set time elapsed to provide database. 
    pauseTimeStamp = new Date();
    let timeDiff = pauseTimeStamp - startTimeStamp;
    timer.time_elapsed = timer.time_elapsed + timeDiff;
    timer.lookup = 'lookup';
    socket.emit('pauseTimer', timer);
    pauseTimer();
  }

  function startTimer(delay = 0) {
    // If interval exists then the timer is already running. 
    if (timerInterval) return;
    
    console.log('Starting timer with ' + delay + ' ms delay');
    
    // Save timestamp to calculate elapsed time on next pause. 
    startTimeStamp = new Date();
    // Set timer as started
    timer.is_paused = false;
    // To make up for server client delay
    timer.time_elapsed += delay; 

    timerStep();
    timerInterval = setInterval(timerStep, 20);

/*     // If time has passed then we need to start the interval at the next whole second.
    // For example if time elapsed is 15200ms then we'll wait for 800ms to start the 
    // interval that will then update the timer every whole second. 
    if (timer.time_elapsed) {
      intervalDelay = 1000 - ( timer.time_elapsed % 1000 ); 

      // If provided network delay is larger than the intervalDelay then that means
      // that the delay pushed the timer passed the current second.
      if (delay > intervalDelay) {
        console.log('Timer should be a second behind master, but it isnt?')
      } 

      // If time_elapsed is equal to the delay then timer is being started from initial and 
      // then 04:00 needs to immediately change to 03:59 and start counting from there. 
      if (timer.time_elapsed === delay) {
        timerStep();
      } 

      setTimeout( () => {
        // If timer was synced while timeout was active then this should be aborted
        if (timerInterval) return;
        timerStep();
        timerInterval = setInterval(timerStep, 20);
      }, intervalDelay); 
    // If time elapsed 
    } else {
      // Else timer is being started for the first time and then 04:00 needs to immediately
      // change to 03:59 and start counting from there. 
      timerStep();
      timerInterval = setInterval(timerStep, 20);
    } */

    // Uppfæra play/pause takka
    if (user.id === timer.user_id || ownedTimers.includes(timer.timer_code)) {
      toggleTimerButton.classList.add('timer-button-pause');
      toggleTimerButton.classList.remove('timer-button-play');
    }
  }

  function timerStep() {
    // Only play sound if seccond if updated
    prevTimer.timerMin = timer.timerMin; 
    prevTimer.timerSec = timer.timerSec; 
    prevTimer.bufferSec = timer.bufferSec;

    let timeElapsedMil = new Date() - startTimeStamp + timer.time_elapsed;
    let timeElapsedsec = Math.floor(timeElapsedMil / 1000);
    let timeLeftOfRound = roundTimeSec - (timeElapsedsec % roundTimeSec);
    timer.timerMil = 1000 - (timeElapsedMil % 1000);
    timer.round = Math.floor(timeElapsedsec / roundTimeSec) + 1;
    if (timeLeftOfRound > (timer.timer_buffer - 1)) {
      let timerRemaining = timeLeftOfRound - timer.timer_buffer;
      timer.timerMin = Math.floor(timerRemaining / 60);
      timer.timerSec = timerRemaining % 60;
      timer.bufferActive = false;
    } else {
      timer.bufferMin = Math.floor( (timeLeftOfRound - 1) / 60);
      timer.bufferSec = (timeLeftOfRound - 1) % 60;
      timer.bufferActive = true;
    }
    updateTimerEl();
    if (prevTimer.timerSec !== timer.timerSec || prevTimer.bufferSec !== timer.bufferSec) {
      playSound();
    }
  }

  function timerStepOld() {
    if (timer.timerSec > 0) {
      timer.timerSec--;
      timer.bufferActive = false;
    } else if (timer.timerMin > 0) {
      timer.timerMin--;
      timer.timerSec = 59;
      timer.bufferActive = false;
    } else if (timer.bufferSec > 0) {
      timer.bufferSec--;
      timer.bufferActive = true;
    } else if (timer.bufferMin > 0) {
      timer.bufferMin--;
      timer.bufferSec = 59;
      timer.bufferActive = true;
    } else {
      timer.round++;
      timer.timerMin = timer.timerMinOrig;
      timer.timerSec = timer.timerSecOrig;
      timer.bufferMin = timer.bufferMinOrig;
      timer.bufferSec = timer.bufferSecOrig;
      timer.bufferActive = false;
      // A timer thats 04:00 should start at 03:59 so we have to initilize the round with one sec elapsed
      timerStep();
    }
    updateTimerEl();
    playSound();
  }

  function pauseTimer() {
    clearInterval(timerInterval);
    timerInterval = null;
    timer.is_paused = true;

    // Uppfæra play/pause takka
    if (user.id === timer.user_id || ownedTimers.includes(timer.timer_code)) {
      toggleTimerButton.classList.add('timer-button-play');
      toggleTimerButton.classList.remove('timer-button-pause');
    }
  };

  function toggleFullscreen() {
    let timerTextEls = timerTextContainerEl.children;
    for (let i = 0; i < timerTextEls.length; i++) {
      if (timerTextEls[i].id === "timerMil") {
        timerTextEls[i].classList.add("timer-text-fullscreen-mil");
      } else {
        timerTextEls[i].classList.add("timer-text-fullscreen");
      }
    }

    // Birta Rounds í fullscreen
    if (showFullscreenRound) {
      fullscreenTimerRoundEl.classList.remove("display-none");
    }

    //if (iOS()) {
    //  timerContainerEl.webkitEnterFullscreen();
    //} else {
      timerContainerEl.requestFullscreen();
    //}
  }

  function fullscreenChanged(event) {
    if (!document.fullscreenElement) {
      let timerTextEls = timerTextContainerEl.children;
      for (let i = 0; i < timerTextEls.length; i++) {
        if (timerTextEls[i].id === "timerMil") {
          timerTextEls[i].classList.remove("timer-text-fullscreen-mil");
        } else {
          timerTextEls[i].classList.remove("timer-text-fullscreen");
        }
      }
      // Fela rounds þegar 
      fullscreenTimerRoundEl.classList.add("display-none");
      disableNoSleep();
    } else {
      enableNoSleep();
    }
  }

  function enableNoSleep() {
    if (isMobileOrTablet() && !isNoSleepActive) {
      noSleep.enable();
      console.log('NoSleep activated')
    }
  }

  function disableNoSleep() {
    if (isNoSleepActive) {
      noSleep.disable();
      isNoSleepActive = false;
      console.log('NoSleep deactivated')
    }
  }
  
  function isMobileOrTablet() {
    let check = false;
    (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
    return check;
  };

  function iOS() {
    return [
      'iPad Simulator',
      'iPhone Simulator',
      'iPod Simulator',
      'iPad',
      'iPhone',
      'iPod'
    ].includes(navigator.platform)
    // iPad on iOS 13 detection
    || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
  }

  function toggleSound() {
    if (soundOn) {
      soundOn = false;
      toggleSoundButton.classList.add('timer-button-unmute');
      toggleSoundButton.classList.remove('timer-button-mute');
    } else {
      soundOn = true;
      toggleSoundButton.classList.add('timer-button-mute');
      toggleSoundButton.classList.remove('timer-button-unmute');
    }
  }

  function resetTimer() {
    timer.time_elapsed = 0;
    initializeTimer();
    updateTimerEl();
    socket.emit('resetTimer', timer);
    pauseTimer();
  }

  function toggleMilliseconds() {
    let toggleMillisecondsTextEl = document.getElementById("toggleMillisecondsText");
    if (millisecondsOn) {
      millisecondsOn = false;
      toggleMillisecondsTextEl.innerText = "Show milliseconds";
      timerMilEl.classList.add('display-none');
    } else {
      millisecondsOn = true;
      toggleMillisecondsTextEl.innerText = "Hide milliseconds";
      timerMilEl.classList.remove('display-none');
    }
    console.log(millisecondsOn)
  }
  
  function toggleFullscreenRound() {
    let toggleFullscreenRoundTextEl = document.getElementById("toggleFullscreenRoundText");
    if (showFullscreenRound) {
      showFullscreenRound = false;
      toggleFullscreenRoundTextEl.innerText = "Show Round on fullscreen";
    } else {
      showFullscreenRound = true;
      toggleFullscreenRoundTextEl.innerText = "Hide Round on fullscreen";
    }
  }

  async function deleteTimer() {
    if (confirm("Are you sure you wish to delete timer?") === false) {
      showToast("Action canceled")
      return;
    }
    // Delete timer
    showLoader();
    let deleteResponse = await deleteData('/' + timer.timer_code);  
    hideLoader();
    if (deleteResponse.status === 200) {
      window.location.href = '/profile';
    } else {
      alert('Failed to delete timer');
    }
  }

  function showLoader() {
    loaderEl.classList.remove('display-none');
  }

  function hideLoader() {
    loaderEl.classList.add('display-none');
  }

  function openSettings() {
    document.getElementById("settingsDropdown").classList.toggle("show");
  }
  
// Close the dropdown menu if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.timer-button-settings')) {
    var dropdowns = document.getElementsByClassName("settings-dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}
  
  document.addEventListener("keydown", (event) => {
    // 32 = space, 80 = p, f = 70, m = 77
    if (event.keyCode === 32 || event.keyCode === 80) {
      toggleTimer();
      return;
    } else if (event.keyCode === 70) {
      toggleFullscreen();

    } else if (event.keyCode === 77) {
      toggleSound();
    }
  })

  screen.orientation.addEventListener("change", (event) => {
    const type = event.target.type;
    const angle = event.target.angle;
    console.log(`ScreenOrientation change: ${type}, ${angle} degrees. `);
    if (!iOS()) { return; }
    if (type === 'landscape-primary') {
      timerContainerEl.classList.add('iphone-fullscreen');
    } else {
      timerContainerEl.classList.remove('iphone-fullscreen');
    }
  });

</script>